<?xml version="1.0" encoding="UTF-8"?>
<!-- Webx Root Context Configuration.  -->
<!-- webx约定，在webx启动时，监听器会扫描WEB-INF目录并装载名为webx.xml的配置文件作为总配置文件 -->
<!-- 所有小应用模块共享一个Spring Root Context根容器。根容器中的bean可被注入到子容器的bean中；反之不可以。 -->
<!-- 这些我们熟悉的xml配置就是SpringExt包含的内容，Ext帮我们灵活的装配了我们需要的bean，具体可参阅webx开发文档 -->
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:p="http://www.springframework.org/schema/p"
             xmlns:services="http://www.alibaba.com/schema/services"
             xmlns:ml-adapters="http://www.alibaba.com/schema/services/module-loader/adapters"
             xmlns:ml-factories="http://www.alibaba.com/schema/services/module-loader/factories"
             xmlns:pull-factories="http://www.alibaba.com/schema/services/pull/factories"
             xmlns:request-contexts="http://www.alibaba.com/schema/services/request-contexts"
             xmlns:session-encoders="http://www.alibaba.com/schema/services/request-contexts/session/encoders"
             xmlns:session-idgens="http://www.alibaba.com/schema/services/request-contexts/session/idgens"
             xmlns:model-encoders="http://www.alibaba.com/schema/services/request-contexts/session/model-encoders"
             xmlns:session-stores="http://www.alibaba.com/schema/services/request-contexts/session/stores"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="
            	 http://www.springframework.org/schema/context
				 http://www.springframework.org/schema/context/spring-context.xsd
                 http://www.alibaba.com/schema/services http://localhost:8080/schema/services.xsd
                 http://www.alibaba.com/schema/services/module-loader/adapters http://localhost:8080/schema/services-module-loader-adapters.xsd
                 http://www.alibaba.com/schema/services/module-loader/factories http://localhost:8080/schema/services-module-loader-factories.xsd
                 http://www.alibaba.com/schema/services/pull/factories http://localhost:8080/schema/services-pull-factories.xsd
                 http://www.alibaba.com/schema/services/request-contexts http://localhost:8080/schema/services-request-contexts.xsd
                 http://www.alibaba.com/schema/services/request-contexts/session/encoders http://localhost:8080/schema/services-request-contexts-session-encoders.xsd
                 http://www.alibaba.com/schema/services/request-contexts/session/idgens http://localhost:8080/schema/services-request-contexts-session-idgens.xsd
                 http://www.alibaba.com/schema/services/request-contexts/session/model-encoders http://localhost:8080/schema/services-request-contexts-session-model-encoders.xsd
                 http://www.alibaba.com/schema/services/request-contexts/session/stores http://localhost:8080/schema/services-request-contexts-session-stores.xsd
                 http://www.springframework.org/schema/beans http://localhost:8080/schema/www.springframework.org/schema/beans/spring-beans.xsd
             ">

    <!-- 支持注解，这是Spring本身的配置 -->
    <context:annotation-config/>
    <context:component-scan base-package="com.gblau.webx.*"/>

    <!-- 支持${xxx}替换。 -->
    <services:property-placeholder>
        <property key="component">common</property>
    </services:property-placeholder>

    <!-- 共享配置 所有的webx beans都需要 MappingRuleService 加载 -->
    <beans:import resource="common/webx-component-and-root.xml" />

    <!-- 异常管道。 -->
    <beans:import resource="common/pipeline-exception.xml" />

    <!-- 资源装载。 -->
    <beans:import resource="common/resources.xml" />

    <!-- URI生成。 -->
    <beans:import resource="common/uris.xml" />

    <!-- 综合设置。 -->
    <services:webx-configuration>
        <!-- 默认将productionMode设为true，建议在jetty插件中设置-DproductionMode=false。 -->
        <productionMode>${productionMode:true}</productionMode>
        <components defaultComponent="web" />
    </services:webx-configuration>


    <!-- 设置request/response/session -->
    <!-- 通过增强以后直接通过HttpSession session = request.getSession();就能获取增强的session等对象 -->
    <services:request-contexts>
        <request-contexts:basic />			<!-- 对输入、输出的数据进行安全检查，排除可能的攻击。例如：XSS过滤、CRLF换行回车过滤等。 -->
        <request-contexts:buffered />		<!-- 对写入response中的数据进行缓存，以便于实现嵌套的页面。 -->
        <request-contexts:lazy-commit />	<!-- 延迟提交response，用来支持基于cookie的session。 -->

        <!-- 解析用户提交的参数，无论是普通的请求，还是multipart/form-data这样的用于上传文件的请求。 -->


        <request-contexts:parser >
            <filters>
                <uploaded-file-whitelist  xmlns="http://www.alibaba.com/schema/services/request-contexts/parser/filters"
                                          extensions="jpg,png,jpeg,xls,xlsx" />
            </filters>
        </request-contexts:parser>

        <!-- 默认locale。 -->
        <!-- 默认charset。 -->
        <!-- 用来临时改变输入charset的参数名 -->
        <!-- 用来临时改变输出charset的参数名 -->
        <!-- 用来持久改变输出locale和charset的参数名 -->
        <!-- 用来在session中保存用户所选择的locale和charset的key -->
        <request-contexts:set-locale defaultLocale="zh_CN"
                                     defaultCharset="UTF-8"
                                     inputCharsetParam="_input_charset"
                                     outputCharsetParam="_output_charset"
                                     paramKey="_lang"
                                     sessionKey="_lang"/>

        <request-contexts:session>			<!-- 增强的Session框架，可将session中的对象保存到cookie、数据库或其它存储中。 -->
            <id cookieEnabled="true" urlEncodeEnabled="false">
                <cookie name="WEBXJSESSIONID" domain="" path="/" maxAge="0" httpOnly="true" secure="false"/>
                <url-encode name="JSESSIONID" />
                <session-idgens:uuid-generator />
            </id>
            <stores>
                <session-stores:cookie-store id="temporaryCookie" maxLength="3896" maxCount="5" checksum="false">	<!--maxCount：一个cookie最大只能约3.8k，当一个cookie存不下session的东西时，webx会分开几个cookie存，maxCount用来限制最多使用的cookie数量 -->
                    <cookie name="tmp" />			<!-- name:指定cookie的名称。假设名称为“tmp”，那么将生成tmp0、tmp1、tmp2等cookie。 -->
                </session-stores:cookie-store>
            </stores>
            <store-mappings>
                <match name="*" store="temporaryCookie" />
            </store-mappings>
        </request-contexts:session>
    </services:request-contexts>

    <!-- 支持上传文件。 -->
    <!-- sizeMax：HTTP请求的最大尺寸（字节，支持K/M/G），超过此尺寸的请求将被抛弃。值-1表示没有限制。 -->
    <!-- fileSizeMax：单个文件允许的最大尺寸（字节，支持K/M/G），超过此尺寸的文件将被抛弃。值-1表示没有限制。 -->
    <!-- repository：暂存上传文件的目录。 注意，这个目录是用Spring ResourceLoader装载的，而不是一个物理路径。关于ResourceLoader，详见ResourceLoading服务的文档。 -->
    <!-- sizeThreshold：将文件放在内存中的阈值（字节，支持K/M/G），小于此值的文件被保存在内存中。 -->
    <!-- keepFormFieldInMemory：是否将普通的form field保持在内存里？ 默认为false，但当sizeThreshold为0时，默认为true。 -->
    <services:upload sizeMax="50M"
                     fileSizeMax="40M"
                     repository="/tmp"
                     sizeThreshold="10K"
                     keepFormFieldInMemory="true" />

    <!-- 将beans暴露给模板。这里定义的tools可被所有components(页面)之间共享。例如在页面可以通过$!{myPullTool.jsAndCssDomain}，直接获取类中的属性值 -->
    <!-- 实际上pull service就相当于提供工具类，可以将工具定义成Java类，而能够在vm模板中调用 -->
    <services:pull>
        <pull-factories:utils />
        <pull-factories:page-tool />
        <pull-factories:control-tool />
        <!-- 对应uris.xml中services:uris服务 -->
        <pull-factories:uris-tool />
        <pull-factories:bean-tool xmlns="http://www.alibaba.com/schema/services/pull/factories" id="myPullTool" class="com.gblau.webx.web.module.tools.common.CommonTools" scope="request"/>
    </services:pull>

    <!-- webx 必须要有module-loader服务 否则会抛出异常-->
    <!-- 用来加载需要的module -->
    <services:module-loader>
        <ml-factories:class-modules>
            <search-packages type="$1" packages="com.gblau.webx.commons.module.*" />
        </ml-factories:class-modules>
    </services:module-loader>

    <beans:import resource="common/mybatis.xml" />
    <beans:import resource="biz/pulltools.xml" />
</beans:beans>